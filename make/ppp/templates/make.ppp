@=

NEW_MAKE = 1;

include "system.ppp"

// set defaults of default values
::default_projectDirs = [];
::default_commonDefs  = [];
::default_configDefs=[ [], [], [], [], [], [] ];

::ph_generate = 0;
::ph_include = [];
::ph_exclude = [];
::ph_analyze_hdrs = 0;

if (env::PPP_CONFIG) {
	include (env::PPP_CONFIG)
}
elif (env::CGV_DIR) {
	include (env::CGV_DIR."/cgv/config/config.ppp")
}

include "config.ppp"
include "rules.ppp"
include "sources.ppp"
include "generate.ppp"

// initialize variables to steer debug output

// whether to debug reading of projects
debug_read = 1;
// whether to debug source collection
debug_srcs = 1;
// whether to debug generation of make files
debug_make = 1;



// initialize variables to manage projects

// complete information about all projects
projects = MAP;
// list of all project names
project_list = [];
// list of tools added through source files
tool_list = [];

// initialize maps used to find project files

// map from project directories to flag telling whether directory has been scanned for project files
project_dir_map = MAP;
// map from project names to paths of project files
project_loc_map = MAP;
// not used
//project_paths = MAP;


main_project = read_and_interpret_project(input_paths[0]);
if (main_project != "") {
	collect_dependent_projects(main_project);
	if (debug_make) {
		cout("topologically sort projects\n");
	}
	topo_sort();
	//cout(project_list);
	if (debug_make) {
		cout("inherit values from child projects\n") ;
	}
	inherit_all();

	//cout(projects::fltk::expIncDirs);
	if (debug_make) {
		cout("collecting sources\n");
	}
	for (pj_idx=0; pj_idx<!project_list; ++pj_idx) {
		collect_sources(project_list[pj_idx]);
	}
	project_list_tmp = project_list;
	project_list = [];
	for (tl_idx=0; tl_idx<!tool_list; ++tl_idx) {
		if (collect_dependent_project(tool_list[tl_idx])) {
			collect_sources(tool_list[tl_idx]);
		}
	}
	inherit_all();
	project_list = project_list.project_list_tmp;
	for (pj_idx=0; pj_idx<!project_list; ++pj_idx) {
		if (debug_make) {
			cout("generating makefiles in ".(projects[project_list[pj_idx]]::build_dir*clean_path)."\n");
		}
		collect_dependencies(project_list[pj_idx]);

		generate_makefile(project_list[pj_idx]);
	}
}




