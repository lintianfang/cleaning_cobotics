@=

include "vs.ppp"


func(::collect_includes; :>L = [], :>I = "", :>return = 0)
{
	for (:>i=0; i<!L; ++i) {
		if (L[i] ~~ STRING) {
			if (get_extension(L[i]) != "c") {
				if (!?L[i]) {
					cout("could not find ".L[i]."\n");
				}
				scan_includes(L[i]; I);
			}
		}
	}
}

func(::generate_includes; :>L = [], :>I = "", :>E=[], :>return = 0)
{
	for (:>i=0; i<!L; ++i) {
		if (L[i] ~~ STRING && !(L[i] < E) && !(drop_path(L[i]) < E) ) {
			if (I) {
				I = I."\n";
			}
			I = I.'#include "'.L[i].'"';
		}
	}
}

func(::transform_sources; :>pj = MAP, :>src=[], :>dest=[], :>path="", :>return=0)
{
	for (:>i=0; i<!src; ++i) {
		if (src[i] ~~ STRING) {
			:>dest_fn = pj::build_dir."/".path."/".drop_path(src[i]);
			::use_ph_current = get_extension(dest_fn) != "c";
			if (use_ph_current) {
				if (ph_options[pj::projectName] ~~ MAP) {
					if (ph_options[pj::projectName]::exclude_sources ~~ LIST) {
						if (drop_path(src[i]) < ph_options[pj::projectName]::exclude_sources) {
							use_ph_current = 0;
						}
					}
				}
			}
			if (use_ph_current) {
				dest = dest.dest_fn;
			}
			else {
				dest = dest.[ [dest_fn, "no_ph"] ];
			}
			::current_file_name = src[i];
			if (!?get_path(dest_fn)) {
				if (mkdir(get_path(dest_fn))) {
					cout("created directory ".get_path(dest_fn)."\n");
				}
				else {
					error(0; "could not create directory ".get_path(dest_fn));
				}
			}
			transform("ph_src.tm"; dest_fn);
		}
	}
}

func(::collect_includes_and_exclude_sources; :>pj = MAP, :>T = MAP, :>I = "", :>new_T = MAP, :>prefix = "", :>return = 0)
{
	:>E=[];
	if (ph_options) {
		if (ph_options[pj::projectName]) {
			if (ph_options[pj::projectName]::exclude_headers) {
				E = ph_options[pj::projectName]::exclude_headers;
			}
		}
	}
	for (:>i=0; i<!T; ++i) {
		if (T ~~ MAP) {
			if (T[i] == "sources" && T[T[i]] ~~ LIST) {
				:>folder=(prefix*"|/|_|")."sources";
				new_T[folder] = [];
				transform_sources(<:pj =& pj, <:src =& T[T[i]], <:dest =& new_T[folder], <:path=prefix."sources");
				T[T[i]] = [ pj::config_indices ].T[T[i]];
				if (pj::ph_generate_hdr && !pj::gen_ph_from_hdrs) {
					collect_includes(<:L =& T[T[i]], <:I =& I);
				}
			}
			elif (pj::ph_generate_hdr && T[i] == "headers" && T[T[i]] ~~ LIST) {
				if (pj::gen_ph_from_hdrs) {
					generate_includes(<:L =& T[T[i]], <:I =& I, <:E =& E);
				}
				elif (ph_analyze_hdrs) {
					collect_includes(<:L =& T[T[i]], <:I =& I);
				}
			}
			elif (T[T[i]] ~~ MAP) {
				collect_includes_and_exclude_sources(<:pj =& pj, <:T =& T[T[i]], <:I =& I, <:new_T =& new_T, <:prefix=prefix.T[i]."_");
			}
		}
	}
}

func(::configure_precompiled_headers; :>pj = MAP, :>return = 0)
{
	if (pj::use_ph) {
		::ph_includes = "";
		if (pj::ph_hdr_file_name ~~ UNDEF) {
			pj::ph_hdr_file_name = (pj::build_dir."/stdafx.h")*clean_path;
			pj::ph_generate_hdr = 1;
		}
		else {
			pj::ph_generate_hdr = 0;
		}
		::ph_hdr_file_name = pj::ph_hdr_file_name;
		:>new_T = MAP;
		collect_includes_and_exclude_sources(<:pj =& pj, <:T =& pj::sourceTree, <:I =& ph_includes, <:new_T =& new_T);
		pj::sourceTree::ph_sources = new_T.[];
		pj::sourceTree::ph_sources::ph_files = [ ph_hdr_file_name, [ pj::build_dir."/stdafx.cxx", "gen_ph"] ];
		if (pj::ph_generate_hdr) {
			transform("ph_hdr.tm"; ph_hdr_file_name);
		}
		transform("ph_main_src.tm"; pj::build_dir."/stdafx.cxx");
	}
}

func(::extend_project_info; :>project_name = "", :>return = 1)
{
	:>pj =& projects[project_name];
	// init plugin list to dependent plugins
	if (pj::all_dep_projects_by_type::plugin) {
		pj::plugin_list = pj::all_dep_projects_by_type::plugin;
		if (pj::all_dep_projects_by_type::application_plugin) {
			pj::plugin_list = pj::plugin_list . pj::all_dep_projects_by_type::application_plugin;
		}
	}
	// determine name of application and extend plugin_list
	if (pj::projectType == "plugin" || pj::projectType == "application_plugin" || pj::projectType == "test") {
		if (pj::all_dep_projects_by_type::application) {
			if (!pj::all_dep_projects_by_type::application == 1) {
				pj::application_name = pj::all_dep_projects_by_type::application[0];
			}
			else {
				error(0; "plugin ".project_name." needs exactly one dependent application, but found ".(!pj::all_dep_projects_by_type::application));
			}
		}
		if (pj::plugin_list) {
			pj::plugin_list = pj::plugin_list.[project_name];
		}
		else {
			pj::plugin_list = [project_name];
		}

		if (pj::projectType == "application_plugin") {
			pj::sourceTree[pj::application_name] = MAP;
			for (:>k=0; k<!projects[pj::application_name]::sourceTree;++k) {
				:>folder = projects[pj::application_name]::sourceTree[k]; 
				if (folder != "make" && folder != "excl_cfg_idxs") {
					pj::sourceTree[pj::application_name][folder] = projects[pj::application_name]::sourceTree[folder].[];
				}
			}
			pj::sourceTree[pj::application_name]::excl_cfg_idxs = [0,1,2,3];
		}
	}
	pj::use_ph = 0;
	pj::gen_ph_from_hdrs = 0;
	if (pj::projectName < ph_generate) {
		pj::use_ph = 1;
	}
	if (pj::projectName < ph_generate_from_hdrs) {
		pj::use_ph = 1;
		pj::gen_ph_from_hdrs = 1;
	}
	configure_precompiled_headers(<:pj =& pj);
	// extend by project file
	projects[project_name]::sourceTree::make = [ pj::config_indices, pj::INPUT_PATH ];
	compute_referenced_projects(project_name);
}

func(generate_makefile; :>project_name="", :>return = 1)
{
	extend_project_info(project_name);
	if (CGV_COMPILER == "vs8" || CGV_COMPILER == "vs9" || CGV_COMPILER == "vs9e") {
		extend_project_info_vs(project_name);
		current_project = project_name;
		:>build_path = projects[project_name]::build_dir."/".project_name;
		transform("vs89.vcproj.tm"; build_path.".vcproj");
		transform("vs89.user.tm"; build_path.".vcproj.".env::USERDOMAIN.".".env::USERNAME.".user");
		transform("vs89.sln.tm"; build_path.".sln");
		transform("vs_rules.tm"; build_path.".rules");
		transform("shader_inc.tm";   build_path."_shader_inc.h");
	}
	elif (CGV_COMPILER == "vs10" || CGV_COMPILER == "vs11" || CGV_COMPILER == "vs12" || CGV_COMPILER == "vs14" || CGV_COMPILER == "vs141" || CGV_COMPILER == "vs142") {
		extend_project_info_vs(project_name);
		current_project = project_name;
		:>build_path = projects[project_name]::build_dir."/".project_name;
		transform("vs10_sln.tm";     build_path.".sln");
		transform("vs10_xml.tm";     build_path.".xml");
		transform("vs10_props.tm";   build_path.".props");
		transform("vs10_targets.tm"; build_path.".targets");
		transform("vs10_vcxproj.tm"; build_path.".vcxproj");
		transform("vs10_vcxproj.user.tm"; build_path.".vcxproj.user");
		transform("vs10_vcxproj.filters.tm"; build_path.".vcxproj.filters");
		transform("shader_inc.tm";   build_path."_shader_inc.h");
	}
	elif (CGV_COMPILER == "cmake") {
		current_project = project_name;
		transform("CMakefile.tm";    projects[project_name]::INPUT_DIR."/CMakefile.txt");
	}
}