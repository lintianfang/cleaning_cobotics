@//check project input
@exclude<make/ppp/templates/check_input.tm>
@//
@//interpret project input
@define(list_separator=" ")
@define(inc_prefix="-I")
@define(libdir_prefix="-L")
@exclude<make/ppp/templates/interpret_input.tm>
@//
@//extend project input
@define(commonDefs=[])
@define(configDefsAdd=[ [["_LIB"],[]][exec_idx], [["_USRDLL"],[]][exec_idx] ])
@define(configDefs=[["NDEBUG","CGV_FORCE_STATIC"].configDefsAdd[0],
		              ["_DEBUG","CGV_FORCE_STATIC"].configDefsAdd[0],
						  ["NDEBUG"].configDefsAdd[1],
						  ["_DEBUG"].configDefsAdd[1]])
@//
@define(mapDeps=MAP)
@define(mapDeps::opengl = ["GL","GL","GL","GL"])
@define(mapDeps::glu    = ["GLU","GLU","GLU","GLU"])
@define(mapDeps::glew   = ["GLEW","GLEW","GLEW","GLEW"])
@define(mapDeps::libpng  = ["png","png","png","png"])
@define(mapDeps::fltk   = ["fltk2 -lfltk2_gl","fltk2d -lfltk2_gld",
		                     "fltk2 -lfltk2_gl","fltk2d -lfltk2_gld"])

@//
@define(lib_prefix="-l")
@define(lib_postfix="")
@define(def_prefix="-D")
@exclude<make/ppp/templates/extend_input.tm>
@//
@if(dependencies ~~ UNDEF)@{@define(dependencies=["","","",""])@}
@//
@//




@//collecting all source files and files generated by rules
@exclude<make/ppp/templates/extend_dep_projects.tm>
@for(f=0;f<!folder_list;f=f+1)@{
	@define(files="")
	@define(fileList=folder_map[folder_list[f]])
	@for(i=0;i<!fileList;i=i+1)@{
		@define(files=files.fileList[i]."\\\n\t")@}@("\n")
@(folder_list[f]) = @(files)
@}

@if(folder_map["ppp"] !~ UNDEF )@{@define(pppFiles=folder_map["ppp"])@}
@else@{@define(pppFiles=[])@}
@if(folder_map["headers"] !~ UNDEF )@{@define(headerFiles=folder_map["headers"])@}
@else@{@define(headerFiles=[])@}
@if(folder_map["shader"] !~ UNDEF )@{@define(shaderFiles=folder_map["shader"])@}
@else@{@define(shaderFiles=[])@}
@("\n")


@//find dependend projects
@define(build_target_postfix="/makefile")
@define(command_postfix=".sh")
@exclude<make/ppp/templates/dep_prj.tm>
@//
@//
@//
@//intern compiler and linker flags
@define(compilerFlags="-Wall")
@define(linkerFlags="")
@//
@//
@//
@//specify and create the directory where obj files live
@define(objDir=build_dir_proj."/obj")
@if(!?objDir)@{
	@if(SYSTEM=="windows")@{
		@system('mkdir "'.(objDir*"|/|\\|").'"'; res)
	@}
	@else@{
		@system('mkdir -p "'.(objDir*"|\\|/|").'"'; res)
	@}
	@if(res != 0)@{
		@error(0; "could not create obj directory ".objDir)
		@exit(-1)
	@}
@}
@//
@//specify and create the directory where depend files live
@define(depDir=build_dir_proj."/dep/")
@if(!?depDir)@{
	@if(SYSTEM=="windows")@{
		@system('mkdir "'.(depDir*"|/|\\|").'"'; res)
	@}
	@else@{
		@system('mkdir -p "'.(depDir*"|\\|/|").'"'; res)
	@}
	@if(res != 0)@{
		@error(0; "could not create dep directory ".depDir)
		@exit(-1)
	@}
@}
@//
@//
@//specify and create the directory where binary files live
@define(outputDir=build_dir_proj."/bin/")
@if(!?outputDir)@{
	@if(SYSTEM=="windows")@{
		@system('mkdir "'.(outputDir*"|/|\\|").'"'; res)
	@}
	@else@{
		@system('mkdir -p "'.(outputDir*"|\\|/|").'"'; res)
	@}
	@if(res != 0)@{
		@error(0; "could not create output directory ".outputDir)
		@exit(-1)
	@}
@}
PROJECT_OUTPUT_DIR=@(build_dir_proj)@("\n")@("\n")
@//
@//
@//
@//
@//linux file extensions
@define(resprepSuffixes=[".bmp",".jpg",".jpeg",".png",".tif",".tiff"])
@define(doxygenSuffix=".dox")
@define(latexSuffix=".dox")
@define(pppHeaderSuffix=".ph")
@define(pppReflectHeaderSuffix=".hh")
@define(srcSuffix=".cxx")
@define(objSuffix=".o")
@define(headerSuffix=".h")
@define(staticLibSuffix=".a")
@define(sharedLibSuffix=".so")
@define(executableSuffix="")
@//
@//
@//
CC=g++ @//(CGV_COMPILER)
@//
@//setup the output filename for the configuration release,debug,release dll,debug dll
@define(outputFile=["","","",""])
@if(projectType=="library"|projectType=="plugin")
@{
	@define(outputFile[0]="lib".projectName.staticLibSuffix)
	@define(outputFile[1]="lib".projectName."_d".staticLibSuffix)
    	@define(outputFile[2]="lib".projectName.sharedLibSuffix)
    	@define(outputFile[3]="lib".projectName."_d".sharedLibSuffix)

@}
@else
@{

	@define(outputFile[0]=projectName.executableSuffix)
     	@define(outputFile[1]=projectName."_d".executableSuffix)

@}


@//preparing OBJ_<conf> Makefile Variables holding all obj files for specified conf
@//UNIT holds all sourcefilenames without file extension
TMP1=$(sources:@(srcSuffix)=@(objSuffix))
TMP2=$(notdir $(TMP1))
OBJ_RELEASE = $(addprefix @(objDir)release/,$(TMP2))
OBJ_DEBUG = $(addprefix @(objDir)debug/,$(TMP2))
@if(projectType=="library"|projectType=="plugin")@{
OBJ_RELEASE_SHARED = $(addprefix @(objDir)release/shared/,$(TMP2))
OBJ_DEBUG_SHARED = $(addprefix @(objDir)debug/shared/,$(TMP2))
@}
UNIT= $(basename $(sources))


@//
@//
@define(config=["release","debug","release_shared","debug_shared"])
@define(objSubDirs=["release/","debug/","release/shared/","debug/shared/"])
@define(objs=["OBJ_RELEASE","OBJ_DEBUG","OBJ_RELEASE_SHARED","OBJ_DEBUG_SHARED"])
@//

@//
@//general make targets: all,release,debug,release_shared and debug_shared
@//
@if(projectType=="library"|projectType=="plugin")@{ @define(nrConfs=4) @}
@else@{@if(projectType=="application"|projectType=="tool")@{ @define(nrConfs=2) @}@}

all: projectname dependprojects prebuild @for(i=0;i<nrConfs;i=i+1)@{ compile_@(config[i]) @(" ")@(outputDir.outputFile[i])@} install
@("\n")
@for(i=0;i<nrConfs;i=i+1)@{
@(config[i]): projectname dependprojects_@(config[i]) prebuild compile_@(config[i]) @(" ")@(outputDir.outputFile[i]) install_@(config[i])@("\n")
@}


@//make target to show the project name in the console
projectname:
	####################################################################
	# Build Project @(projectName)
	####################################################################
@("\n")


@//make target to build dependend projects with all configurations
@//
dependprojects:
@if(projectDeps !~ UNDEF)@{
@for(p=0;p<!projectDeps;p=p+1)@{ 
	@("\tmake -f ".build_dir."/".projectDeps[p]."/makefile all")
@}@}
@("\n")


@//For all configurations
@for(i=0;i<nrConfs;i=i+1)@{

@//create sub directory build_dir/<projectName>/obj/<configuration>
@if(!?(objDir.objSubDirs[i]))@{
	@if(SYSTEM=="windows")@{
		@system('mkdir "'.((objDir.objSubDirs[i])*"|/|\\|").'"'; res)
	@}
	@else@{
		@system('mkdir -p "'.((objDir.objSubDirs[i])*"|\\|/|").'"'; res)
	@}
	@if(res != 0)@{
		@error(0; "could not create output directory ".depDir)
		@exit(-1)
	@}
@}

@//make target to build dependend projects for a configuration
@//
dependprojects_@(config[i]):
@if(projectDeps !~ UNDEF)@{
@for(p=0;p<!projectDeps;p=p+1)@{ 
	@("\tmake -f ".build_dir."/".projectDeps[p]."/makefile ".config[i])
@}@}
@("\n")


@//make targets for linking
@(outputDir.outputFile[i]): $(@(objs[i]))
	############################################
	# Linking:  @(config[i])
	############################################
@if(i<2&(projectType=="library"|projectType=="plugin"))@{
	ar rs @(outputDir.outputFile[i]) $(@(objs[i]))
@}@else@{
	$(CC) @(libDirs)@(" ") @(config_defines[i]) @if(i>=2)@{ -shared @} @(linkerFlags) -o @(outputDir.outputFile[i]) $(@(objs[i])) @(dependencies[i]) @if(project_by_type["library"] !~ UNDEF)@{@for(p=0;p<!project_by_type["library"];p=p+1)@{ -l@(project_by_type["library"][p])@}@}@//(" ")@(project_map[project_by_type["library"][p]]["dependencies"][i])
@}
@("\n")
@("\n")

@//make targets for compiling
compile_@(config[i]): @(depDir.".depend_".config[i])
	############################################
	# Compile:  @(config[i])
	############################################
	make -f  @(depDir.".depend_".config[i])
@("\n")
@("\n")


@//make targets for dependencies
.PHONY: @(depDir.".depend_".config[i])@("\n")
@(depDir.".depend_".config[i]): $(sources)
	############################################
	# Make dependencies: @(config[i])
	############################################
	rm -f  @(depDir.".depend_".config[i])
	echo all: $(@(objs[i]))@("'\\n'") >> @(depDir.".depend_".config[i])
	for u in $(UNIT); do \
		echo -n @(objDir)@(objSubDirs[i])>> @(depDir.".depend_".config[i]); \
		$(CC) -MM  @(" ")@(config_defines[i]) $$u@(srcSuffix)@(" ") @(includeDirs*'|$|$|') >> @(depDir.".depend_".config[i]); \
		echo @("'\t")$(CC) @if(i>=2)@{-fPIC @} @if(i==1|i==3)@{-g @} @(config_defines[i]) -c $$< -o $$@('@ ') @(includeDirs)@("\\n'") >> @(depDir.".depend_".config[i]); done
@("\n")


@}



@//make targets for install
install:
	############################################
	# Install: all                                  
	############################################
@for(i=0;i<nrConfs;i=i+1)@{
	cp @(outputDir.outputFile[i]." ".CGV_INSTALL."/bin/")@}
@("\n")

@for(i=0;i<nrConfs;i=i+1)@{
install_@(config[i]):
	############################################
	# Install: @(config[i])                                  
	############################################
	cp @(outputDir.outputFile[i]." ".CGV_INSTALL."/bin/")
@("\n")
@}
@("\n")

@//make targets for clean up
.PHONY: clean
clean: clean_prebuild
	############################################
	# Clean:  all                                 
	############################################
	rm -r -f $(OBJ_RELEASE) $(OBJ_DEBUG) .depend_release .depend_debug @(" ") @(outputDir.outputFile[0])@(" ")  @(outputDir.outputFile[1]) @if(projectType=="library"|projectType=="plugin")@{ $(OBJ_RELEASE_SHARED) $(OBJ_DEBUG_SHARED) .depend_release_shared .depend_debug_shared  @(" ")@(outputDir.outputFile[2]) @(" ")@(outputDir.outputFile[3])@}
@("\n")

.PHONY: clean_release
clean_release: clean_prebuild
	############################################
	# Clean: release                                  
	############################################
	rm -r -f $(OBJ_RELEASE) .depend_release @(" ")@(outputDir.outputFile[0]) @if(projectType=="library"|projectType=="plugin")@{ $(OBJ_RELEASE_SHARED)  .depend_release_shared @(" ")@(outputDir.outputFile[2]) @}
@("\n")

.PHONY: clean_debug
clean_debug: clean_prebuild
	############################################
	# Clean: debug                               
	############################################
	rm -r -f $(OBJ_DEBUG) .depend_debug @(" ")@(outputDir.outputFile[1]) @if(projectType=="library"|projectType=="plugin")@{ $(OBJ_DEBUG_SHARED)  .depend_debug_shared @(" ")@(outputDir.outputFile[3]) @}
@("\n")	

.PHONY: clean_prebuild
clean_prebuild:
	rm -r -f @for(i=0;i<!pppFiles;i=i+1)@{ 
		@if(pppFiles[i]+(!pppFiles[i]-3)==".ph")@{ @(pppFiles[i]-3).h @(" ") @}@}
	rm -r -f @for(i=0;i<!headerFiles;i=i+1)@{ 
		@if(headerFiles[i]+(!headerFiles[i]-3)==".hh")@{ @(headerFiles[i]-3).tih @(" ")
				@(headerFiles[i]-3).tdh @(" ") @(headerFiles[i]-3)_info.cxx @(" ")@}@}
	rm -r -f @for(i=0;i<!shaderFiles;i=i+1)@{ 
		 @(shaderFiles[i]-5).log @(" ") @}
@("\n")	
@("\n")	



@// make targets for custom build rules
include $(CGV_DIR)/make/ppp/templates/build_rules.makefile
prebuild: prebuild_out prebuild_all

prebuild_out:			
	############################################
	# Prebuild                                 
	############################################ 

prebuild_all: @for(i=0;i<!pppFiles;i=i+1)@{ 
		@if(pppFiles[i]+(!pppFiles[i]-3)==".ph")@{ @(pppFiles[i]-3).h @("\\\n\t") @}@}
	@for(i=0;i<!headerFiles;i=i+1)@{ 
		@if(headerFiles[i]+(!headerFiles[i]-3)==".hh")@{ @(headerFiles[i]-3).tih @("\\\n\t") @(headerFiles[i]-3).tdh @("\\\n\t") @(headerFiles[i]-3)_info.cxx@("\\\n\t")@}@}
	@//for(i=0;i<!shaderFiles;i=i+1)@{ 
		 @//(shaderFiles[i]-5).log @("\\\n\t") @}
