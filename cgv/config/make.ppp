@if(NEW_MAKE ~~ UNDEF)@{
// define the cgv directory from the environment variable
@if(CGV_DIR ~~ UNDEF)@{
	@if(env::CGV_DIR ~~ UNDEF)@{
		@error(0; "essential environment variable CGV_DIR not defined!\n")
		@exit(-1)
	@}
	@else@{
		@define(CGV_DIR = env::CGV_DIR)
	@}
@}
// define the build directory from the environment variable or the CGV_DIR
@if(env::CGV_BUILD ~~ UNDEF)@{
	@define(CGV_BUILD = CGV_DIR)
@}
@else@{
	@define(CGV_BUILD = env::CGV_BUILD)
@}
// define the install directory from the environment variable or the CGV_DIR
@if(env::CGV_INSTALL ~~ UNDEF)@{
	@define(CGV_INSTALL = CGV_DIR+"/build")
@}
@else@{
	@define(CGV_INSTALL = env::CGV_INSTALL)
@}
//define CGV_COMPILER from environment or system specific defaults, which
//are vs9 under windows and gcc under linux. Finally, set the compiler version
//number, i.e. 8 or 9 for vs8 and vs9
@if(CGV_COMPILER ~~ UNDEF)@{
	@if(env::CGV_COMPILER)@{
		@define(CGV_COMPILER=env::CGV_COMPILER)
	@}
	@else@{
		@if(SYSTEM == "windows")@{
			@define(CGV_COMPILER="vs9")
		@}
		@else@{
			@define(CGV_COMPILER="gcc")
		@}
	@}
@}
@define(CGV_COMPILER_VERSION = -1)
@if(CGV_COMPILER == "vs8")@{
	@define(CGV_COMPILER_VERSION = 8)
	@define(project_folder_support=1)
@}
@if(CGV_COMPILER == "vs9")@{
	@define(CGV_COMPILER_VERSION = 9)
	@define(project_folder_support=1)
@}
@if(CGV_COMPILER == "vs9e")@{
	@define(CGV_COMPILER_VERSION = 9)
	@define(project_folder_support=0)
@}
@if(CGV_COMPILER == "vs10")@{
	@define(CGV_COMPILER_VERSION = 9)
	@define(project_folder_support=0)
@}
// set the input file specific variables
@define(INPUT_DIR=input_dir)
@define(INPUT_PATH=input_path)
@define(INPUT_FILE=((input_file+1)-1))
// set default values of not essential defines
@define(projectDeps=[])
@define(addProjectDeps=[])
@define(addProjectDirs=[])
@define(addIncDirs=[])
@define(addDefines=[])
@define(addSharedDefines=[])
@define(addStaticDefines=[])
@define(addLibDirs=[])
@define(addDependencies=[])
@define(excludeSourceDirs=[])
@define(excludeSourceFiles=[])
@define(addCommandLineArguments=[])
@define(addRuleFiles=[])
@define(addRules=[])
// define the rules for generating files
@define(rules = [
	MAP.[ ["extensions",["bmp","jpg","jpeg","png","tif","tiff","avi","gif","ico","ani"]],
		   ["folder","resources"],
			["tool","res_prep"],
		   ["rules", [ MAP.[ ["keep_extension",1],
		                     ["extension","cxx"],
									["path",CGV_BUILD.""] ] ] ] ],
	MAP.[ ["extensions",["txt"]],
		   ["folder","text"],
			["tool","res_prep"] ],
	MAP.[ ["extensions",["ph"]],
		   ["folder","ppp"],
		   ["rules", [ MAP.[ ["extension", "h"] ] ] ] ],
	MAP.[ ["extensions",["hh"]],
		   ["folder","headers"],
		   ["rules", [ MAP.[ ["extension", "tih"] ],
							MAP.[ ["extension","tdh"] ],
							MAP.[ ["extension","cxx"],
							      ["suffix","_info"] ] ] ] ],
	MAP.[ ["extensions",["h", "tih", "tdh"]],
		   ["folder","headers"] ],
	MAP.[ ["extensions",["rc"]],
		   ["folder","resources"] ],
	MAP.[ ["extensions",["ppp"]],
		   ["folder","ppp"] ],
	MAP.[ ["extensions",["cxx", "cc", "c", "c++", "cpp"]],
		   ["folder","sources"] ],
	MAP.[ ["extensions",["dox", "doc"]],
		   ["folder","doxygen"] ],
	MAP.[ ["extensions",["gui"]],
		   ["folder","gui"] ],
	MAP.[ ["extensions",["def", "cfg"]],
		   ["folder","config"] ],
	MAP.[ ["extensions",["glsl", "glvs", "glgs", "glfs", "glcs", "pglsl", "pglvs", "pglgs", "pglfs", "pglcs", "glpr", "hglsl"]],
			["tool","shader_test"],
		   ["folder","shader"] ] 
] )
@define(mapDeps=MAP)
@define(sourceDirs=[])
@define(sourceFiles=[])
@}