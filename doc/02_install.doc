// This file is for Doxygen input. It is not compiled.

using namespace cgv;

/*! \page install Installation and Conventions

\section download Download and Fast Start

The current version of the framework can be found on github https://github.com/sgumhold/cgv.

For a fast start under windows with visual studio do the following:
- Choose directory (**avoid paths with spaces such as windows desktop, home or library paths**) into which to clone the cgv source tree and run the following commands:
\code
git clone https://github.com/sgumhold/cgv.git
\endcode
- create a build directory where the temporary files should be stored
- in case you want to use the x64 platform start the define_platform.bat script and follow instructions
- in case you do not want to use the most current visual studio toolset start the define_windows_sdk.bat script and follow instructions
- use 2 explorer windows to drag build directory onto cgv/define_system_variables.bat 
  alternatively you can run the following command in the command prompt:
\code
define_system_variables.bat <global-path-to-build-directory>
\endcode
- select your configuration, typically [i] for MS VS 2019
- close the command prompt and optionally open a new to ensure that the systems variables have been updated
- bind the extension .pj to cgv/bin/generate_makefile.bat by right clicking cgv/plugins/examples/examples.pj
  and finding cgv/bin/generate_makefile.bat as the default application for .pj files. This generates
  the solution of the examples plugin.
- alternatively you can run cgv/build_example_solution.bat or drag and drop cgv/plugins/examples/examples.pj
  onto cgv/bin/generate_makefile.bat
- after visual studio started, select configuration "Debug Dll" or "Release Dll"
- ensure that examples plugin is the active project
- build solution
- run examples project and select example from menu (try bump mapper, which can also be created by <Ctrl-B>)
- press <F1> to blend in help on shortcuts and mouse control of the view
- try out to mouse control of the view by rotating the view, translating it and zooming in and out
- try out the shortcuts
- click through the user interface

\section system System Configuration

In order to be able to work with the cgv framework, the following environment
variables need to be set
- obligatory: CGV_DIR ... path of cgv framework
- obligatory: CGV_INSTALL ... path, where compiled libraries and applications are installed.
If not defined the Windows build rules for resource files and shaders won't find the corresponding
tools and therefore fail. If these are not needed, CGV_INSTALL defaults to CGV_DIR. Executables
and shared libraries / dlls are copied to "$(CGV_INSTALL)/bin" and libraries to "$(CGV_INSTALL)/lib"
- optional: PATH ... the directories "$(CGV_INSTALL)/bin" and "$(CGV_DIR)/bin" should be added to the path variable
- optional: CGV_BUILD ... path, where the intermediate files are created. For example 
"c:/temp/build_cgv" under windows or "~/temp" under linux. If not set,
CGV_BUILD defaults to CGV_DIR/build.
- optional: CGV_PLATFORM ... only under windows; is WIN32 or x64 and can be defined with define_platform.bat script (defaults to WIN32)
- optional: CGV_WINDOWS_SDK ... only under windows since VS 2017; is one of the installed toolsets of visual studio and can be defined with define_windows_sdk.bat (defaults to most current toolset version of selected visual studio version)
- optional: CGV_CHARSET ... only for Visual Studio; can be MultiByte (char is 8 bit) or Unicode (char is 16 bit) and defaults to MultiByte. Use define_charset.bat to change the value.
- optional: CGV_OPTIONS ... semicolon separated further options, where currently only NO_OPENVR is supported to avoid initialization of steam vr. Use define_options.bat to change the value.
- optional: CGV_DATA ... the root paths for datasets which are used in the cgv_data to find files.
- optional: CGV_PROJECT_DIR ... path to repository with further common projects that build on the cgv core libraries
- optional: CGV_SUPPORT_DIR ... path to repository with libraries and plugins that build on 3rd party libraries that do not come with a free license

Under windows the following six scripts - located in the root directory
of the cgv framework - help to manage the necessary environment variables. 
Just double click them to execute them:
- show_system_variables.bat ... shows the current settings
- define_system_variables.bat ... can be started without or with one parameter. 
It allows to set all necessary environment variables interactively or automatically.
One has to answer at least the first question for the used compiler. The CGV_DIR is
derived from the location of the script file. CGV_BUILD is set to the parameter
passed to the script or without parameter it is set to CGV_DIR/build. To specify
the build path as parameter, you can drag the build path with the mouse onto the
script. If the build path is set through the command line parameter, CGV_INSTALL
is set to CGV_BUILD, otherwise to CGV_DIR. The variable CGV_COMPILER (see 
section on Makefile generation) is set from 
the user interaction. Finally, the user specific path extension is augmented by
"$(CGV_DIR)/bin" and "$(CGV_INSTALL)/bin".
- define_project_dir.bat ... sets the system variable CGV_PROJECT_DIR. The script
is started with one parameter - the path to the cgv project directory. The parameter 
can be defined by dragging the project directory in the windows explorer onto the 
batch script.
- define_support_dir.bat ... sets the system variable CGV_SUPPORT_DIR. The script
is started with one parameter - the path to the cgv support directory. The parameter 
can be defined by dragging the support directory in the windows explorer onto the 
batch script.
- define_data_dir.bat ... sets the system variable CGV_DATA. The script
is started with one parameter - the path to the cgv data directory. The parameter 
can be defined by dragging the data directory in the windows explorer onto the 
batch script.
- undefine_system_variables.bat ... removes all cgv specific settings from the
system variables.
- build_example_solution.bat ... after definition of the system variables invoke
this script to start the makefile generation process on the examples solution.

\section thirdparty Third Party Libraries

The framework uses the following platform independent third party 
libraries with completely free licenses
- zlib
- libjpeg
- libpng
- libtiff
- fltk
- ann
- glew
- pthread (deprecated since the introduction of threads to the C++-standard)
- webserver (pretty unknown little lib)

Sources of the standard libraries are included primarily for the windows 
distribution, where these libraries can be compiled on demand. 

\b glew is included on both plattforms. When using the cgv framework, the
\c GL/glew.h header need not be included directly. Normally, one includes
the header cgv/render/gl/gl.h, which includes the glew header. If the
\c GL/wglew.h header is needed too, include cgv/render/gl/wgl.h instead.
For all other libraries except \b ann, one typically installs them independent
of the cgv framework.

3rd party libraries with more restrive licenses or which are platform dependent
are located in the \b support repository https://141.76.62.199/svn/support. It 
currently includes the libraries
- dx9
- sapi51
- platform_sdk
- devIL (only to some special image formats such as gif)
- strmbase
- CBLAS (used by the superLU library in the superlu_wrapper plugin)
- superlu (sparse linear equation solver used by superlu_wrapper plugin, 
  which implements the interface in cgv/math/sparse_les.h
- csparse (sparse symmetric linear equation solver used by csparse_wrapper 
  plugin, which implements the interface in cgv/math/sparse_les.h
- gecko-sdk (used for netscape browser plugins)

The following third party libraries are used and are typically preinstalled
on most platforms
- opengl
- glu

In order for the framework to find headers and libraries of libraries, which 
are not included in the framework, one has to add the paths to one of the following 
environment variables, that store lists of paths as semicolon separated strings:
- INCLUDE ... for additional include directories
- LIBRARY (windows) / LD_LIBRARY_PATH (linux) ... for additional 
	library paths

\section makegen Makefile Generation
The cgv framework comes with a platform independent makefile
generation scheme. It is based on cgv specific project files 
with the extension ".pj". All project files are located in the
source directories. Currently, the following target platforms 
are supported
- Visual Studio 2005 (vs8)
- Visual Studio 2008 (vs9)
- Visual Studio 2008 Express (vs9e)
- Visual Studio 2010 (vs10)
- Visual Studio 2012 (vs11)
- Visual Studio 2013 (vs12)
- Visual Studio 2015 (vs14)
- Visual Studio 2017 (vs141)
- Visual Studio 2019 (vs142)

Under development is the support for gcc under linux (gcc).
vs8, vs9, vs9e, vs10, vs12, vs14, vs141, vs142 and gcc are the shortcuts 
for the target compiler / development environment. The environment variable
CGV_COMPILER is to be set to this shortcut (under windows with the script
define_system_variables.bat)

\a Hint: A template project file is located at \c CGV_DIR/make/ppp/templates/pj.ppp.
It documents all possible entries to a project file. To write a new
project file, one typically copies this template, renames it to something
like "my_project.pj" and edits it with a favorite text editor. The current
version of this file is inserted to the end of this page

Furthermore, CMakeFiles are provided to build the framework under linux and windows.

\subsection windows Creating Target Files on Windows

After a project file has been created, one can simply transform it
to the target platform by passing the file as command line argument
to the batch-script \c "generate_makefile.bat" located in \c CGV_DIR/bin.
This script only runs if the system variable \c CGV_COMPILER is set.

\a Hint: It is very convenient to bind the \c "generate_makefile.bat" script as default 
program to the extension \c "*.pj". This can be done by double clicking a pj-file and
selecting \c "generate_makefile.bat" as default program.

\a Hint: In the cgv root directory there is a windows script \c "build_example_solution.bat"
that can be double clicked after the system variables have been set correctly 
with the script define_system_variables.bat. It calls \c "generate_makefile.bat" with
the examples plugin pj-File as argument. This allows you to get started very
easily.

\a Careful! Since Visual Studio 2008 ppp also generates \c "*.user" files, which
define the to be executed application and the command line arguments when starting
the application from Visual Studio. If a project is opened in Visual Studio while ppp
is used to generate project, solution and user files, Visual Studio only reloads the
solution and the project files but \b not the user file. Therefore the command line
arguments are not updated and newly added plugins won't be read when starting the
application from Visual Studio. Thus take care to close or unload the main project 
in Visual Studio before rebuilding changed user files.

\subsection linux Creating Target Files under Linux

To be described

\subsection deps Dependent Projects

All projects that are specified as dependent projects in the project
files are generated automatically with the current project and will also
be updated if they have changed. 

\subsection pjTemp Project Template
The current version of the template for project files is

\c make/ppp/templates/pj.ppp

\include pj.ppp

*/
