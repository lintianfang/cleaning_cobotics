#version 330

layout(location = 0) in vec3 a_position;

uniform bool fullscreen;
uniform int draw_mode;
uniform bool flipped;

uniform vec2 zoom;
uniform vec2 offset;

out vec2 uv;

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************



const vec2 uv_normal[4] =
    vec2[](vec2(0.0, 1.0), vec2(1.0, 1.0), vec2(0.0, 0.0), vec2(1.0, 0.0));

const vec2 uv_upper_half[4] =
    vec2[](vec2(0.0, 1.0), vec2(1.0, 1.0), vec2(0.0, 0.5), vec2(1.0, 0.5));
const vec2 uv_lower_half[4] =
    vec2[](vec2(0.0, 0.5), vec2(1.0, 0.5), vec2(0.0, 0.5), vec2(1.0, 0.0));

const vec2 uv_left_half[4] =
    vec2[](vec2(0.0, 1.0), vec2(0.5, 1.0), vec2(0.0, 0.0), vec2(0.5, 0.0));
const vec2 uv_right_half[4] =
    vec2[](vec2(0.5, 1.0), vec2(1.0, 1.0), vec2(0.5, 0.0), vec2(1.0, 0.0));


void main() {

	switch(draw_mode) {
		case 0: 
			uv = uv_normal[gl_VertexID]; break;
		case 1: 
			uv = uv_upper_half[gl_VertexID]; break;
		case 2: 
			uv = uv_lower_half[gl_VertexID]; break;
		case 3: 
			uv = uv_left_half[gl_VertexID]; break;
		case 4: 
			uv = uv_right_half[gl_VertexID]; break;
		default:
			uv = uv_normal[gl_VertexID]; break;
	}

	bool top = gl_VertexID < 2;
	bool left = gl_VertexID == 0 || gl_VertexID == 2;

	uv.x += left ? zoom.x : -zoom.x;
	uv.y += top ? -zoom.y : zoom.y;
	uv += offset;

	if(flipped)
		uv.y = 1.0 - uv.y;

  if (fullscreen)
    gl_Position = vec4(a_position.xy, 0.0, 1.0);
  else
    gl_Position = get_modelview_projection_matrix() * vec4(a_position, 1.0);
}