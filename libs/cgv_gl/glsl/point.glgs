#version 150
#extension GL_EXT_geometry_shader4 : enable

layout(points) in;
layout(triangle_strip, max_vertices = 4) out;

uniform bool measure_point_size_in_pixel = true;
uniform float reference_point_size = 1.0;
uniform float pixel_extent_per_depth;

in vec4 color_gs[];

out vec2 uv;
out vec4 color_fs;

out float percentual_blend_width;
out float percentual_core_size;
out float percentual_point_size;
out float percentual_splat_size;

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

//***** begin interface of splat.glsl ***********************************
void prepare_splat(
	in float reference_point_radius, in float pixel_extent,
	out float percentual_core_size, out float percentual_point_size,
	out float percentual_blend_width, out float percentual_splat_size);
//***** end interface of surface.glsl ***********************************

void emit_corner(in vec3 corner, in float u, in float v)
{
	uv = vec2(u,v);

	// compute position in clip space
	gl_Position	   = get_projection_matrix() * vec4(corner,1.0);

	EmitVertex();
}

void main()
{
	// set color to color attribute
	color_fs = color_gs[0];
	// transform position to eye space
	vec4 p4d = get_modelview_matrix()*gl_PositionIn[0];
	vec3 position_eye = p4d.xyz/p4d.w;
	// compute extent of a pixel at point depth in eye coordinates
	float pixel_extent = pixel_extent_per_depth * abs(position_eye.z);
	// compute point radius from input point size
	float reference_point_radius = 0.5 * gl_PointSizeIn[0] * (measure_point_size_in_pixel ?  pixel_extent : reference_point_size);
	// compute splat parameters for fragment shader
	prepare_splat(reference_point_radius, pixel_extent,
		percentual_core_size, percentual_point_size,
		percentual_blend_width, percentual_splat_size);
	// compute radius of splat
	float splat_radius = reference_point_radius * percentual_splat_size;
	// compute splat base vectors
	vec3 dx = vec3(1.0 ,0.0, 0.0);
	vec3 dy = vec3(0.0, 1.0, 0.0);
	// scale by splat radius
	dx *= splat_radius;
	dy *= splat_radius;
	// generate splat vertices
	emit_corner(position_eye + dx - dy,  percentual_splat_size, -percentual_splat_size);
	emit_corner(position_eye + dx + dy,  percentual_splat_size,  percentual_splat_size);
	emit_corner(position_eye - dx - dy, -percentual_splat_size, -percentual_splat_size);
	emit_corner(position_eye - dx + dy, -percentual_splat_size,  percentual_splat_size);
}
