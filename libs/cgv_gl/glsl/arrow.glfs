#version 150

in vec3 t;
in vec3 p_eye;
in vec3 p0_eye;
in vec3 p1_eye;
in vec3 n_eye;
in vec4 color_fs;
in float head_radius;
in float head_length;
in float recompute_normal;

//***** begin interface of fragment.glfs ***********************************
uniform float gamma = 2.2;
void finish_fragment(vec4 color);
//***** end interface of fragment.glfs ***********************************

//***** begin interface of surface.glsl ***********************************
vec4 compute_reflected_appearance(vec3 position_eye, vec3 normal_eye, vec4 color, int side);
vec4 compute_reflected_appearance_texture(vec3 position_eye, vec3 normal_eye, vec2 texcoords, vec4 color, int side);
//***** end interface of surface.glsl ***********************************

//***** begin interface of side.glsl ***********************************
bool keep_this_side(in vec3 position, in vec3 normal, out int side);
void update_material_color_and_transparency(inout vec3 mat_color, inout float transparency, in int side, in vec4 color);
void update_normal(inout vec3 normal, in int side);
//***** end interface of side.glsl ***********************************

void main()
{
	vec3 n = normalize(n_eye);
	if (recompute_normal > 0.0) {
		vec3 v = p_eye - p0_eye;
		vec3 t = normalize(p1_eye - p0_eye);
		v -= dot(v, t)*t;
		v = normalize(v);
		n = normalize(head_radius*t + head_length*v);
	}
	int side;
	if (!keep_this_side(p_eye, n, side)) {
		discard;
	}
	finish_fragment(compute_reflected_appearance(p_eye, n, color_fs, side));
}