#version 330

uniform float percentual_width;
uniform float percentual_depth;
uniform int N;
uniform int M;
uniform vec3 domain_min_pnt;
uniform vec3 domain_max_pnt;
uniform vec3 extent;
uniform vec4 orientation;
uniform vec3 center_location;

layout(location = 0) in float xpos;
layout(location = 1) in float ypos;
layout(location = 2) in float zpos;
in vec4 color;

out mat3 NM;
out mat4 PM;
out vec4 color_gs;

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

//***** begin interface of quaternion.glsl ***********************************
vec4 unit_quaternion();
vec3 rotate_vector_with_quaternion(in vec3 preimage, in vec4 q);
vec3 inverse_rotate_vector_with_quaternion(in vec3 v, in vec4 q);
void quaternion_to_axes(in vec4 q, out vec3 x, out vec3 y, out vec3 z);
void quaternion_to_matrix(in vec4 q, out mat3 M);
void rigid_to_matrix(in vec4 q, in vec3 t, out mat4 M);
//***** end interface of quaternion.glsl ***********************************

vec3 map_plot_to_plot3(in vec3 pnt);
vec4 map_plot_to_world3(in vec3 pnt);

void main()
{
	NM = get_normal_matrix();
	mat3 R;
	quaternion_to_matrix(orientation, R);
	NM *= R;
	vec3 plot_min = map_plot_to_plot3(domain_min_pnt);
	vec3 box_extent;
	box_extent.x = (percentual_width / float(N - 1)) *extent.x;
	box_extent.y = (percentual_depth / float(M - 1)) *extent.y;
	vec4 p = vec4(map_plot_to_plot3(vec3(xpos,ypos,zpos)),1.0);
	box_extent.z = p.z - plot_min.z;
	// compute box transformation
	mat4 BM = mat4(0.0);
	BM[0][0] = box_extent[0];
	BM[1][1] = box_extent[1];
	BM[2][2] = box_extent[2];
	BM[3]    = p;
	BM[3].z  = 0.5*(p.z + plot_min.z);
	mat4 M;
	rigid_to_matrix(orientation, center_location, M);
	PM = get_modelview_matrix()*M*BM;

	color_gs = color;
	gl_Position = p;
}